// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DeviceIdentity
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppTrackingTransparency
@_exported import DeviceIdentity
import PWCore
import Swift
import _Concurrency
import _StringProcessing
public enum AdvertisingIdentificationPermisionError : Error {
  case denied
  case restricted
  public static func == (a: DeviceIdentity.AdvertisingIdentificationPermisionError, b: DeviceIdentity.AdvertisingIdentificationPermisionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AdvertisingIdentificationPermisionError {
  public var localizedErrorDescription: String? {
    get
  }
}
public enum PermissionRequestable {
  case allowed
  case notAllowed
  case alreadyAuthorized
  public static func == (a: DeviceIdentity.PermissionRequestable, b: DeviceIdentity.PermissionRequestable) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PWCore {
  public static var isAdvertisingIdentifierPermissionRequestable: PermissionRequestable {
    get
  }
  @objc public static func requestAdvertisingIdentifierPermission(success: @escaping (_ advertisingIdentifier: String) -> Void, failure: @escaping (_ error: Error) -> Void)
}
extension DeviceIdentity.AdvertisingIdentificationPermisionError : Swift.Equatable {}
extension DeviceIdentity.AdvertisingIdentificationPermisionError : Swift.Hashable {}
extension DeviceIdentity.PermissionRequestable : Swift.Equatable {}
extension DeviceIdentity.PermissionRequestable : Swift.Hashable {}
