<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWBundleManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWBundleManager</TokenIdentifier>
			<Abstract type="html">A generic class for download/decrypt/unzip a bundle for specific URL.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/setCacheFallbackTimeoutOverride:</TokenIdentifier>
			<Abstract type="html">The timeout for network request to get the bundle before falling back to the cached version. This is only used if a cached bundle exists, for non-cached bundles the default of 60 seconds is used. If this is not set at all, the default of 10 seconds is used.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval cacheFallbackTimeoutOverride</Declaration>
			
			
			<Anchor>//api/name/cacheFallbackTimeoutOverride</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/cacheFallbackTimeoutOverride</TokenIdentifier>
			<Abstract type="html">The timeout for network request to get the bundle before falling back to the cached version. This is only used if a cached bundle exists, for non-cached bundles the default of 60 seconds is used. If this is not set at all, the default of 10 seconds is used.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval cacheFallbackTimeoutOverride</Declaration>
			
			
			<Anchor>//api/name/cacheFallbackTimeoutOverride</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWBundleManager/cacheFallbackTimeoutOverride</TokenIdentifier>
			<Abstract type="html">The timeout for network request to get the bundle before falling back to the cached version. This is only used if a cached bundle exists, for non-cached bundles the default of 60 seconds is used. If this is not set at all, the default of 10 seconds is used.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval cacheFallbackTimeoutOverride</Declaration>
			
			
			<Anchor>//api/name/cacheFallbackTimeoutOverride</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWBundleManager/sharedInstance</TokenIdentifier>
			<Abstract type="html">Shared PWBundleManager.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>+ (PWBundleManager *)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/removeBundleForURL:</TokenIdentifier>
			<Abstract type="html">Remove the bundle for a specific url.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)removeBundleForURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The specific url for which you want to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeBundleForURL:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch an unencrypted bundle from the url, unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:decryptionKey:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch an encrypted bundle from the url, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url decryptionKey:(NSString *)decryptionKey withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>decryptionKey</Name>
					<Abstract type="html">The key used to deprypt the bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns information about the bundle fetch and the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:decryptionKey:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:retryInterval:maxRetry:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch an unencrypted bundle from the url, unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url retryInterval:(NSInteger)retryInterval maxRetry:(NSInteger)maxRetry withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>retryInterval</Name>
					<Abstract type="html">The interval to attempt retry.</Abstract>
				</Parameter><Parameter>
					<Name>maxRetry</Name>
					<Abstract type="html">The maximum no of times to retry.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns information about the bundle fetch and the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:retryInterval:maxRetry:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:retryInterval:maxRetry:decryptionKey:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch an encrypted bundle from the url, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url retryInterval:(NSInteger)retryInterval maxRetry:(NSInteger)maxRetry decryptionKey:(NSString *)decryptionKey withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>retryInterval</Name>
					<Abstract type="html">The interval to attempt retry.</Abstract>
				</Parameter><Parameter>
					<Name>maxRetry</Name>
					<Abstract type="html">The maximum no of times to retry.</Abstract>
				</Parameter><Parameter>
					<Name>decryptionKey</Name>
					<Abstract type="html">The key used to deprypt the bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns information about the bundle fetch and the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:retryInterval:maxRetry:decryptionKey:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBuildingBundleById:draft:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch building bundle for the specified building identifier, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBuildingBundleById:(NSInteger)buildingId draft:(BOOL)isDraft withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>buildingId</Name>
					<Abstract type="html">The building identifier.</Abstract>
				</Parameter><Parameter>
					<Name>isDraft</Name>
					<Abstract type="html">Tell it&apos;s a draft or live bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns information about the bundle fetch and the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBuildingBundleById:draft:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchCampusBundleById:draft:withCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch campus bundle for the specified campus identifier, unzip campus bundle, decprypt building bundles then unpack them, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchCampusBundleById:(NSInteger)campusId draft:(BOOL)isDraft withCompletion:(PWBundleFetchCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>campusId</Name>
					<Abstract type="html">The campus identifier.</Abstract>
				</Parameter><Parameter>
					<Name>isDraft</Name>
					<Abstract type="html">Tell it&apos;s a draft or live bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns information about the bundle fetch and the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchCampusBundleById:draft:withCompletion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an unencrypted bundle from the url, unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:decryptionKey:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an encrypted bundle from the url, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url decryptionKey:(NSString *)decryptionKey completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>decryptionKey</Name>
					<Abstract type="html">The key used to deprypt the bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:decryptionKey:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:retryInterval:maxRetry:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an unencrypted bundle from the url, unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url retryInterval:(NSInteger)retryInterval maxRetry:(NSInteger)maxRetry completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>retryInterval</Name>
					<Abstract type="html">The interval to attempt retry.</Abstract>
				</Parameter><Parameter>
					<Name>maxRetry</Name>
					<Abstract type="html">The maximum no of times to retry.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:retryInterval:maxRetry:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:retryInterval:maxRetry:decryptionKey:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an encrypted bundle from the url, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url retryInterval:(NSInteger)retryInterval maxRetry:(NSInteger)maxRetry decryptionKey:(NSString *)decryptionKey completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>retryInterval</Name>
					<Abstract type="html">The interval to attempt retry.</Abstract>
				</Parameter><Parameter>
					<Name>maxRetry</Name>
					<Abstract type="html">The maximum no of times to retry.</Abstract>
				</Parameter><Parameter>
					<Name>decryptionKey</Name>
					<Abstract type="html">The key used to deprypt the bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:retryInterval:maxRetry:decryptionKey:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBuildingBundleById:draft:completion:</TokenIdentifier>
			<Abstract type="html">Fetch building bundle for the specified building identifier, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBuildingBundleById:(NSInteger)buildingId draft:(BOOL)isDraft completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>buildingId</Name>
					<Abstract type="html">The building identifier.</Abstract>
				</Parameter><Parameter>
					<Name>isDraft</Name>
					<Abstract type="html">Tell it&apos;s a draft or live bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBuildingBundleById:draft:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>